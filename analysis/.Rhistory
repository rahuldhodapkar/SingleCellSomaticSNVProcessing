)
View(sigtest)
mir <- c()
p_vals <- c()
ors <- c()
for (x in colnames(df)) {
test <- fisher.test(df_merge[,x], df_merge$Condition);
mir <- c(mir, x);
p_vals <- c(p_vals, test$p.value);
ors <- c(ors, test$estimate);
}
sigtest <- data.frame(
MIR=mir,
PVal=p_vals,
Alpha=p_vals*31,
OR=ors
)
test_df <- subset(df_merge, Celltypes %in% c("Astrocytes"))
mir <- c()
p_vals <- c()
ors <- c()
for (x in colnames(df)) {
test <- fisher.test(test_df[,x], test_df$Condition);
mir <- c(mir, x);
p_vals <- c(p_vals, test$p.value);
ors <- c(ors, test$estimate);
}
test_df <- subset(df_merge, Celltypes %in% c("Oligo"))
mir <- c()
p_vals <- c()
ors <- c()
for (x in colnames(df)) {
test <- fisher.test(test_df[,x], test_df$Condition);
mir <- c(mir, x);
p_vals <- c(p_vals, test$p.value);
ors <- c(ors, test$estimate);
}
unique(df_merge$Celltypes)
test_df <- subset(df_merge, Celltypes %in% c("Immune_cells"))
mir <- c()
p_vals <- c()
ors <- c()
for (x in colnames(df)) {
test <- fisher.test(test_df[,x], test_df$Condition);
mir <- c(mir, x);
p_vals <- c(p_vals, test$p.value);
ors <- c(ors, test$estimate);
}
test_df <- df_merge
mir <- c()
p_vals <- c()
ors <- c()
for (x in colnames(df)) {
test <- fisher.test(test_df[,x], test_df$Condition);
mir <- c(mir, x);
p_vals <- c(p_vals, test$p.value);
ors <- c(ors, test$estimate);
}
sigtest <- data.frame(
MIR=mir,
PVal=p_vals,
Alpha=p_vals*31,
OR=ors
)
test_df <- subset(df_merge, Celltypes == "Immune_cells")
table(test_df$Condition, test_df$genes)
test_df <- df_merge
mir <- c()
p_vals <- c()
ors <- c()
for (x in colnames(df)) {
test <- fisher.test(test_df[,x], test_df$Condition);
mir <- c(mir, x);
p_vals <- c(p_vals, test$p.value);
ors <- c(ors, test$estimate);
}
sigtest <- data.frame(
MIR=mir,
PVal=p_vals,
Alpha=p_vals*31,
OR=ors
)
test_df <- subset(df_merge, grepl("Oligo", Celltypes))
test_df <- subset(df_merge, grepl("Oligo", Celltypes))
mir <- c()
p_vals <- c()
ors <- c()
for (x in colnames(df)) {
test <- fisher.test(test_df[,x], test_df$Condition);
mir <- c(mir, x);
p_vals <- c(p_vals, test$p.value);
ors <- c(ors, test$estimate);
}
subset(df_merge, grepl("Oligo", Celltypes))
test_df <- subset(df_merge, grepl("Oligo", Celltypes))
table(test_df$MIR100HG, test_df$Condition)
test_df <- df_merge
mir <- c()
p_vals <- c()
ors <- c()
for (x in colnames(df)) {
test <- fisher.test(table(test_df[,x], test_df$Condition));
mir <- c(mir, x);
p_vals <- c(p_vals, test$p.value);
ors <- c(ors, test$estimate);
}
sigtest <- data.frame(
MIR=mir,
PVal=p_vals,
Alpha=p_vals*31,
OR=ors
)
for (x in colnames(df)) {
print(x)
table(test_df[,x], test_df$Condition)
}
for (x in colnames(df)) {
print(x)
print(table(test_df[,x], test_df$Condition))
}
test_df <- subset(df_merge, grepl("Oligo", Celltypes));
mir <- c()
p_vals <- c()
ors <- c()
for (x in colnames(df)) {
test <- fisher.test(table(test_df[,x], test_df$Condition));
mir <- c(mir, x);
p_vals <- c(p_vals, test$p.value);
ors <- c(ors, test$estimate);
}
OR=orstest_df <- subset(df_merge, grepl("Oligo", Celltypes));
test_df <- subset(df_merge, grepl("Oligo", Celltypes));
for (x in colnames(df)) {
print(x)
print(table(test_df[,x], test_df$Condition))
}
test_df <- subset(df_merge, grepl("Neuron", Celltypes));
for (x in colnames(df)) {
print(x)
print(table(test_df[,x], test_df$Condition))
}
test_df <- df_merge
mir <- c()
p_vals <- c()
ors <- c()
for (x in colnames(df)) {
test <- fisher.test(table(test_df[,x], test_df$Condition));
mir <- c(mir, x);
p_vals <- c(p_vals, test$p.value);
ors <- c(ors, test$estimate);
}
sigtest <- data.frame(
MIR=mir,
PVal=p_vals,
Alpha=p_vals*31,
OR=ors
)
test_df <- subset(df_merge, grepl("Neuron", Celltypes));
for (x in colnames(df)) {
print(x)
print(table(test_df[,x], test_df$Condition))
}
test_df <- subset(df_merge, Condition == 'MS' & grepl("Neuron", Celltypes));
for (x in colnames(df)) {
print(x)
print(table(test_df[,x], test_df$Condition))
}
test_df <- subset(df_merge, Condition == 'MS');
for (x in colnames(df)) {
print(x)
print(table(test_df[,x], test_df$Celltypes))
}
test_df <- subset(df_merge, Condition == 'MS');
for (x in colnames(df)) {
print(x)
print(table(test_df[,x], test_df$Celltypes))
}
library(stringr)
library(ggplot2)
install.packages('RPostgreSQL')
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ms",
host = "localhost", port = 5432)
library(RPostgreSQL)
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ms",
host = "localhost", port = 5432)
# check for the cartable
# check for the cartable
dbExistsTable(con, "variant")
# check for the cartable
dbExistsTable(con, "variants_by_gene")
variants_df <- dbGetQuery(con, "SELECT * from variants_by_gene")
vdf <- dbGetQuery(con, "SELECT * from variants_by_gene")
vdf_ms <- dbGetQuery(con, '
SELECT * from variants_by_gene
WHERE "GROUP" = \'HC\';
');
vdf_ms <- dbGetQuery(con, '
SELECT * from variants_by_gene
WHERE "Group" = \'HC\';
');
vdf_hc <- dbGetQuery(con, '
SELECT * from variants_by_gene
WHERE "Group" = \'HC\';
');
vdf_ms <- dbGetQuery(con, '
SELECT * from variants_by_gene
WHERE "Group" = \'MS\';
');
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffMutGenes.R', echo=TRUE)
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffMutGenes.R', echo=TRUE)
View(vdf_ms)
View(vdf_ms)
View(vdf_hc)
View(vdf_hc)
df <- vdf_ms %>%
full_join(vdf_hc, by = 'Gene', suffix=('.ms', '.hc'))
# Full Join dataframes
df <- vdf_ms %>%
full_join(vdf_hc, by = 'Gene', suffix=c('.ms', '.hc'))
df[is.na(df)] <- 0
# Full Join dataframes
vdf_merge <- vdf_ms %>%
full_join(vdf_hc, by = 'Gene', suffix=c('.ms', '.hc'))
df <- data.frame(
Gene=         vdf_merge$Gene,
NumCells.ms=  vdf_merge$NumCells.ms,
NumDonors.ms= vdf_merge$NumDonors.ms,
NumCells.hc=  vdf_merge$NumCells.hc,
NumDonors.hc= vdf_merge$NumDonors.hc
);
df[is.na(d)] <- 0
df <- data.frame(
Gene=         vdf_merge$Gene,
NumCells.ms=  vdf_merge$NumCells.ms,
NumDonors.ms= vdf_merge$NumDonors.ms,
NumCells.hc=  vdf_merge$NumCells.hc,
NumDonors.hc= vdf_merge$NumDonors.hc
);
df[is.na(df)] <- 0
write.csv(df, "~/mutgenes.csv", row.names = F);
i=1
x <- fisher.test(matrix(c(
df$NumCells.ms[i], TOTAL_NUM_CELLS_MS - df$NumCells.ms[i],
df$NumCells.hc[i], TOTAL_NUM_CELLS_HC - df$NumCells.hc[i]
), nrow = 2, ncol = 2))
TOTAL_NUM_CELLS_MS = 758;
TOTAL_NUM_CELLS_HC = 763;
x <- fisher.test(matrix(c(
df$NumCells.ms[i], TOTAL_NUM_CELLS_MS - df$NumCells.ms[i],
df$NumCells.hc[i], TOTAL_NUM_CELLS_HC - df$NumCells.hc[i]
), nrow = 2, ncol = 2))
x
x$estimate
# Generate p-value for each gene
p_vals <- c()
estimates <- c()
for (i in 1:nrow(df)) {
x <- fisher.test(matrix(c(
df$NumCells.ms[i], TOTAL_NUM_CELLS_MS - df$NumCells.ms[i],
df$NumCells.hc[i], TOTAL_NUM_CELLS_HC - df$NumCells.hc[i]
), nrow = 2, ncol = 2))
p_vals <- c(p_vals, x$p.value)
estimates <- c(estimates, x$estimate)
}
df$p <- p_vals;
df$or_est <- estimates;
df$log2or <- log2(df$or_est);
plot(df$log2or, df$p);
plot(df$log2or, -df$p);
plot(df$log2or, -log(df$p));
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffMutGenes.R', echo=TRUE)
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffMutGenes.R', echo=TRUE)
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffMutGenes.R', echo=TRUE)
setwd("~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis")
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffMutGenes.R', echo=TRUE)
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffMutGenes.R', echo=TRUE)
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffMutGenes.R', echo=TRUE)
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffMutGenes.R', echo=TRUE)
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffMutGenesFat.R', echo=TRUE)
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/RareDiffMutGenesBlood.R', echo=TRUE)
setwd("~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis")
#!/usr/bin/env Rscript
#
# Call differentially expressed genes from high quality variant calls of coding variants
# between MS patients and healthy controls in blood.
#
library(dplyr)
library(RPostgreSQL)
library(ggplot2)
# From `by_hand_queries.sql`
TOTAL_NUM_CELLS_MS = 758;
TOTAL_NUM_CELLS_HC = 763;
TOTAL_NUM_DONORS_MS = 8;
TOTAL_NUM_DONORS_HC = 8;
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ms",
host = "localhost", port = 5432)
#!/usr/bin/env Rscript
#
# Call differentially expressed genes from high quality variant calls of coding variants
# between MS patients and healthy controls in blood.
#
library(dplyr)
library(RPostgreSQL)
library(ggplot2)
# From `by_hand_queries.sql`
TOTAL_NUM_CELLS_MS = 758;
TOTAL_NUM_CELLS_HC = 763;
TOTAL_NUM_DONORS_MS = 8;
TOTAL_NUM_DONORS_HC = 8;
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ms",
host = "localhost", port = 5432)
vdf_ms <- dbGetQuery(con, '
SELECT * from expression_by_gene
WHERE
"Group" = \'MS\'
AND "TissueType"=\'B\';
');
vdf_hc <- dbGetQuery(con, '
SELECT * from expression_by_gene
WHERE
"Group" = \'HC\'
AND "TissueType"=\'B\';
');
vdf_hc <- dbGetQuery(con, '
SELECT * from expression_by_gene
WHERE
"Group" = \'HC\'
AND "TissueType"=\'B\';
');
# Full Join dataframes
vdf_merge <- vdf_ms %>%
full_join(vdf_hc, by = 'EnsemblGene', suffix=c('.ms', '.hc'))
df_cell <- data.frame(
Gene=         vdf_merge$EnsemblGene,
NumCells.ms=  vdf_merge$NumCells.ms,
NumCells.hc=  vdf_merge$NumCells.hc,
NumDonors.ms= vdf_merge$NumDonors.ms,
NumDonors.hc= vdf_merge$NumDonors.hc
);
df_cell[is.na(df_cell)] <- 0
# Generate p-value for each gene
p_vals <- c()
estimates <- c()
for (i in 1:nrow(df_cell)) {
x <- fisher.test(matrix(c(
df_cell$NumCells.ms[i], TOTAL_NUM_CELLS_MS - df_cell$NumCells.ms[i],
df_cell$NumCells.hc[i], TOTAL_NUM_CELLS_HC - df_cell$NumCells.hc[i]
), nrow = 2, ncol = 2))
p_vals <- c(p_vals, x$p.value)
estimates <- c(estimates, x$estimate)
}
df_cell$p <- p_vals;
df_cell$or_est <- estimates;
df_cell$log2or <- log2(df_cell$or_est);
df_cell$negLog10p <- -log10(df_cell$p)
write.csv(df_cell, './ad_hoc/diffexp_cell_blood.csv', row.names = F);
#!/usr/bin/env Rscript
#
# Call differentially expressed genes from high quality variant calls of coding variants
# between MS patients and healthy controls in blood.
#
library(dplyr)
library(RPostgreSQL)
library(ggplot2)
# From `by_hand_queries.sql`
TOTAL_NUM_CELLS_MS = 758;
TOTAL_NUM_CELLS_HC = 763;
TOTAL_NUM_DONORS_MS = 8;
TOTAL_NUM_DONORS_HC = 8;
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ms",
host = "localhost", port = 5432)
vdf_ms <- dbGetQuery(con, '
SELECT * from expression_by_gene
WHERE
"Group" = \'MS\'
AND "TissueType"=\'B\';
');
vdf_hc <- dbGetQuery(con, '
SELECT * from expression_by_gene
WHERE
"Group" = \'HC\'
AND "TissueType"=\'B\';
');
# Full Join dataframes
vdf_merge <- vdf_ms %>%
full_join(vdf_hc, by = 'EnsemblGene', suffix=c('.ms', '.hc'))
library(dplyr)
library(RPostgreSQL)
library(ggplot2)
# From `by_hand_queries.sql`
TOTAL_NUM_CELLS_MS = 758;
TOTAL_NUM_CELLS_HC = 763;
TOTAL_NUM_DONORS_MS = 8;
TOTAL_NUM_DONORS_HC = 8;
# loads the PostgreSQL driver
drv <- dbDriver("PostgreSQL")
# creates a connection to the postgres database
# note that "con" will be used later in each connection to the database
con <- dbConnect(drv, dbname = "ms",
host = "localhost", port = 5432)
vdf_ms <- dbGetQuery(con, '
SELECT * from expression_by_gene
WHERE
"Group" = \'MS\'
AND "TissueType"=\'B\';
');
vdf_hc <- dbGetQuery(con, '
SELECT * from expression_by_gene
WHERE
"Group" = \'HC\'
AND "TissueType"=\'B\';
');
# Full Join dataframes
vdf_merge <- vdf_ms %>%
full_join(vdf_hc, by = c('EnsemblGene', 'HRGeneName'), suffix=c('.ms', '.hc'))
View(vdf_merge)
View(vdf_merge)
################################################################
## Differences By Number of Cells
################################################################
df_cell <- data.frame(
Gene=         vdf_merge$EnsemblGene,
HRGeneName=   vdf_merge$HRGeneName,
NumCells.ms=  vdf_merge$NumCells.ms,
NumCells.hc=  vdf_merge$NumCells.hc,
NumDonors.ms= vdf_merge$NumDonors.ms,
NumDonors.hc= vdf_merge$NumDonors.hc
);
df_cell[is.na(df_cell)] <- 0
# Generate p-value for each gene
p_vals <- c()
estimates <- c()
for (i in 1:nrow(df_cell)) {
x <- fisher.test(matrix(c(
df_cell$NumCells.ms[i], TOTAL_NUM_CELLS_MS - df_cell$NumCells.ms[i],
df_cell$NumCells.hc[i], TOTAL_NUM_CELLS_HC - df_cell$NumCells.hc[i]
), nrow = 2, ncol = 2))
p_vals <- c(p_vals, x$p.value)
estimates <- c(estimates, x$estimate)
}
df_cell$p <- p_vals;
df_cell$or_est <- estimates;
df_cell$log2or <- log2(df_cell$or_est);
df_cell$negLog10p <- -log10(df_cell$p)
write.csv(df_cell, './ad_hoc/diffexp_cell_blood.csv', row.names = F);
################################################################
## Differences By Number of Donors
################################################################
df_donor <- data.frame(
Gene=         vdf_merge$EnsemblGene,
HRGeneName=   vdf_merge$HRGeneName,
NumCells.ms=  vdf_merge$NumCells.ms,
NumCells.hc=  vdf_merge$NumCells.hc,
NumDonors.ms= vdf_merge$NumDonors.ms,
NumDonors.hc= vdf_merge$NumDonors.hc
);
df_donor[is.na(df_donor)] <- 0
# Generate p-value for each gene
p_vals <- c()
estimates <- c()
for (i in 1:nrow(df_donor)) {
x <- fisher.test(matrix(c(
df_donor$NumDonors.ms[i], TOTAL_NUM_DONORS_MS - df_donor$NumDonors.ms[i],
df_donor$NumDonors.hc[i], TOTAL_NUM_DONORS_HC - df_donor$NumDonors.hc[i]
), nrow = 2, ncol = 2))
p_vals <- c(p_vals, x$p.value)
estimates <- c(estimates, x$estimate)
}
df_donor$p <- p_vals;
df_donor$or_est <- estimates;
df_donor$log2or <- log2(df_donor$or_est);
df_donor$negLog10p <- -log10(df_donor$p)
write.csv(df_donor, './ad_hoc/diffexp_donor_blood.csv', row.names = F);
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffExpressedGenesBlood.R', echo=TRUE)
setwd("~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis")
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffExpressedGenesBlood.R', echo=TRUE)
source('~/Documents/Hafler/PROG/AnnotatedVariantExploration/analysis/CallDiffExpressedGenesBlood.R', echo=TRUE)
View(df_cell)
View(df_cell)
/* Get number of cells with FOXP3 transcripts by donor and tissue type */
select "Gene", "DonorNum", "TissueType", "Group",
count(*),
repeat('■', (  100.0
* count(*)
/ sum(count(*)) over()
)::integer
) as pct
from expression_donor_unclean
group by "Gene", "DonorNum", "TissueType", "Group"
HAVING
"Gene" = 'RPS28' AND "TissueType"='B'
ORDER BY
"Group";
